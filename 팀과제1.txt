오버로딩의 학습


CPnt 기반의 클래스 만들기


#include<iostream>

using namespace std;

class CPnt{

  int x, y;

public:

  CPnt(int a, int b):x(a),y(b){}

  CPnt Add(CPnt me){return(CPnt(x + me.x, y + me.y));}

  void Pr(){cout << x <<"," << y << endl;}

};

int main(){

  CPnt p1(1,1), p2(2,2), p3(0,0);

  p3 = p1.Add(p2);

  p3.Pr();

} 

-----

CPnt 기반의 연산자 오버로딩


#include<iostream>

using namespace std;

class CPnt{

  int x, y;

public:

  CPnt(int a, int b):x(a),y(b){}

  CPnt operator+(CPnt me){return(CPnt(x + me.x, y + me.y));}

  void Pr(){cout << x <<"," << y << endl;}

};

int main(){

  CPnt p1(1,1), p2(2,2), p3(0,0);

  p3 = p1 + p2;

  p3.Pr();

} 

 
제출

1. 팀 간에 학습하면서 즐거웠던 애피소드를 적으시오.

저희 팀은 이번 시간에 생성자 오버로딩과 CPnt 기반 클래스를 사용하는 것을 배웠습니다. 계속 접하던 생성자와 클래스 였지만 내부의 내용이 이해가 어려워 팀원들에게 도움을 요청했습니다.
아쉽게 혜령이도 코딩하는 과정이 이해가 가지 않았다고 해서 곤란했는데, 다행히 지연이가 두 명을 이해시키기 위해 코딩에 주석(//)도 달아주고, 교수님께서 계속 복습시켜주신 생성자에 대한 내용, 특징들을 알려주면서 노력해줬습니다. 지연이가 가르쳐 주는 내용을 열심히 들으며 공부하는 혜령이의 모습도 인상적이었습니다. 
얼떨결에 팀장을 맡게되어 막연한 두려움이 있었고, 말도 터본 적 없어 대하기 힘들었을 수도 있는데 잘 가르쳐 준 지연이에게 고마웠고, 노력하는 혜령이에게도 고마웠습니다. 저 스스로도 발전하기 위해 공부할 것이고, 이번 팀프로젝트로 앞으로의 다른 팀프로젝트를 해낼 수 있다는 자신감이 생기게 되었습니다. 팀원분들 모두 고생하셨습니다.